@page "/licores/edit/{LicorId:int}"
@using CurrieTechnologies.Razor.SweetAlert2;
@using System.Net;
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

<h3>Editar Licor</h3>

@if (licor is null)
{
    <p>Cargando...</p>
}
else
{
    <LicorForm @ref="licorForm" Licor="licor" OnValidSubmit="EditAsync" ReturnAction="Return" />
}

@code {
    private Licor? licor;
    private LicorForm? licorForm;

    [Parameter]
    public int LicorId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await repository.Get<Licor>($"/api/licores/{LicorId}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/sedes");
                return;
            }

            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        licor = responseHttp.Response;
    }

    private async Task EditAsync()
    {
        var responseHttp = await repository.Put("/api/licores", licor);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        Return();
    }

    private void Return()
    {
        licorForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo($"/tipolicores/details/{licor!.TipoLicorId}");
    }
}

